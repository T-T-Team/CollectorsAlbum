import net.darkhax.curseforgegradle.*

buildscript {
    repositories {
        mavenCentral()

        maven {
            name = "forge"
            url = "https://maven.minecraftforge.net"
        }
        maven {
            url = 'https://maven.parchmentmc.org'
        }
        maven {
            url "https://plugins.gradle.org/m2/"
        }
        maven {
            url = 'https://repo.spongepowered.org/maven'
        }
    }
}
plugins {
    id 'java'
    id 'net.minecraftforge.gradle' version "${forge_gradle_version}"
    id 'org.spongepowered.mixin' version "${mixin_loader}"
    id 'net.darkhax.curseforgegradle' version "${cursegradle_plugin_version}"
    id 'com.modrinth.minotaur' version "${modrinth_plugin_version}"
}

version = project.version
group = project.mod_group
archivesBaseName = "${project.mod_id}-forge-${project.minecraft_version}"

minecraft.reobf = false

minecraft {
    mappings channel: 'official', version: minecraft_version

    def accessTransformerFile = project(":forge").file("src/main/resources/META-INF/accesstransformer.cfg")
    if (accessTransformerFile.exists()) {
        accessTransformer = accessTransformerFile
    }

    runs {
        client {
            workingDirectory project.file('run/client')
            ideaModule "${rootProject.name}.${project.name}.main"
            taskName 'Client'
            property 'mixin.env.remapRefMap', 'true'
            property 'mixin.env.refMapRemappingFile', "${projectDir}/build/createSrgToMcp/output.srg"
            mods {
                modClientRun {
                    source sourceSets.main
                    source project(":common").sourceSets.main
                }
            }
        }

        server {
            workingDirectory project.file('run/server')
            ideaModule "${rootProject.name}.${project.name}.main"
            taskName 'Server'
            property 'mixin.env.remapRefMap', 'true'
            property 'mixin.env.refMapRemappingFile', "${projectDir}/build/createSrgToMcp/output.srg"
            mods {
                modServerRun {
                    source sourceSets.main
                    source project(":common").sourceSets.main
                }
            }
        }
    }
}

sourceSets.main.resources.srcDir 'src/generated/resources'

dependencies {
    minecraft "net.minecraftforge:forge:${forge_version}"

    // Configuration
    implementation("dev.toma.configuration:configuration-${minecraft_version}:${configuration_version}-forge")

    // Note: Hack fix for now, force jopt-simple to be exactly 5.0.4 because Mojang ships that version, but some transitive dependencies request 6.0+
    implementation('net.sf.jopt-simple:jopt-simple:5.0.4') { version { strictly '5.0.4' } }
    annotationProcessor("org.spongepowered:mixin:${mixin_version}:processor")

    compileOnly project(":common")
}

tasks.withType(JavaCompile) {
    source(project(":common").sourceSets.main.allSource)
}

processResources {
    from project(":common").sourceSets.main.resources
}

jar {
    manifest {
        attributes([
                "Specification-Title"     : "${mod_name}",
                "Specification-Vendor"    : "${mod_authors}",
                "Specification-Version"   : project.jar.archiveVersion,
                "Implementation-Title"    : "${mod_name}",
                "Implementation-Version"  : project.jar.archiveVersion,
                "Implementation-Vendor"   : "${mod_authors}",
                "Implementation-Timestamp": new Date().format("yyyy-MM-dd'T'HH:mm:ssZ"),
                "MixinConfigs"            : "${mod_id}.mixins.json,${mod_id}.forge.mixins.json"
        ])
    }

    exclude("${mod_id}.accesswidener")
}

mixin {
    config("${mod_id}.mixins.json")
    config("${mod_id}.forge.mixins.json")
}

sourceSets.each {
    def dir = layout.buildDirectory.dir("sourcesSets/$it.name")
    it.output.resourcesDir = dir
    it.java.destinationDirectory = dir
}

tasks.register('publishToCurseForge', TaskPublishCurseForge) {
    dependsOn(tasks.jar)
    apiToken = CURSEFORGE_TOKEN
    debugMode = debug.toBoolean()

    def uploadFile = upload(curseforge_project_id, tasks.jar.archiveFile)
    uploadFile.changelogType = Constants.CHANGELOG_MARKDOWN
    uploadFile.changelog = file("../CHANGELOG.md").exists() ? file('../CHANGELOG.md').text : "-- No changelog provided --"
    uploadFile.releaseType = Constants.RELEASE_TYPE_RELEASE
    uploadFile.displayName = "${mod_id}-forge-${minecraft_version}-${version}"
    uploadFile.addModLoader('Forge')
    uploadFile.addEnvironment('Client', 'Server')
    uploadFile.addJavaVersion("Java 21")
    uploadFile.addRequirement("configuration")
    compatible_mc_versions.split(",").each { gameVersion ->
        uploadFile.addGameVersion(gameVersion)
    }
}

List compatibleVersions = compatible_mc_versions.split(",")
modrinth {
    token = MODRINTH_TOKEN
    projectId = modrinth_project_id
    versionNumber = "${version}"
    versionName = "${mod_id}-forge-${minecraft_version}-${version}"
    versionType = "release"
    uploadFile = jar
    gameVersions = compatibleVersions
    debugMode = debug.toBoolean()
    changelog = file("../CHANGELOG.md").exists() ? file("../CHANGELOG.md").text : "-- No changelog provided --"
    loaders = ["forge"]
    dependencies {
        required.project "configuration"
    }
}
tasks.modrinth.dependsOn(tasks.jar)