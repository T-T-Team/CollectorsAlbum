import net.darkhax.curseforgegradle.*

buildscript {
    repositories {
        mavenCentral()
        maven {
            url "https://plugins.gradle.org/m2/"
        }
    }
}

plugins {
    id 'fabric-loom' version "${fabric_loom}"
    id 'idea'
    id 'net.darkhax.curseforgegradle' version "${cursegradle_plugin_version}"
    id 'com.modrinth.minotaur' version "${modrinth_plugin_version}"
}

version = project.version
group = project.mod_group
archivesBaseName = "${project.mod_id}-fabric-${project.minecraft_version}"

repositories {
    maven {
        name = "Terraformers" // Modmenu
        url = "https://maven.terraformersmc.com/"
    }
    maven {
        name = "Ladysnake Libs" // Trinkets
        url = 'https://maven.ladysnake.org/releases'
    }
}

dependencies {
    minecraft "com.mojang:minecraft:${minecraft_version}"
    mappings loom.officialMojangMappings()
    modImplementation "net.fabricmc:fabric-loader:${fabric_loader_version}"
    modImplementation "net.fabricmc.fabric-api:fabric-api:${fabric_version}"
    // Modmenu
    modImplementation("com.terraformersmc:modmenu:${modmenu_version}")
    // Trinkets
    modImplementation("dev.emi:trinkets:${trinkets_version}")
    // Configuration
    modImplementation("dev.toma.configuration:configuration-${minecraft_version}:${configuration_version}-fabric")

    compileOnly project(":common")
}

loom {
    def accessWidenerFile = project(":common").file("src/main/resources/${mod_id}.accesswidener")
    if (accessWidenerFile.exists()) {
        accessWidenerPath.set(accessWidenerFile)
    }

    mixin {
        defaultRefmapName.set("${mod_id}.refmap.json")
    }

    runs {
        client {
            client()
            setConfigName("Fabric Client")
            ideConfigGenerated(true)
            runDir("run/client")
        }
        server {
            server()
            setConfigName("Fabric Server")
            ideConfigGenerated(true)
            runDir("run/server")
        }
    }
}

jar {
    manifest {
        attributes([
                "Specification-Title"     : "${mod_name}",
                "Specification-Vendor"    : "${mod_authors}",
                "Specification-Version"   : project.jar.archiveVersion,
                "Implementation-Title"    : "${mod_name}",
                "Implementation-Version"  : project.jar.archiveVersion,
                "Implementation-Vendor"   : "${mod_authors}",
                "Implementation-Timestamp": new Date().format("yyyy-MM-dd'T'HH:mm:ssZ")
        ])
    }

    exclude("META-INF/accesstransformer.cfg")
}

processResources {
    from project(":common").sourceSets.main.resources
}

tasks.withType(JavaCompile) {
    source(project(":common").sourceSets.main.allSource)
}

tasks.register('publishToCurseForge', TaskPublishCurseForge) {
    dependsOn(tasks.remapJar)
    apiToken = CURSEFORGE_TOKEN
    debugMode = debug.toBoolean()

    def uploadFile = upload(curseforge_project_id, tasks.remapJar.archiveFile)
    uploadFile.changelogType = Constants.CHANGELOG_MARKDOWN
    uploadFile.changelog = file("../CHANGELOG.md").exists() ? file('../CHANGELOG.md').text : "-- No changelog provided --"
    uploadFile.releaseType = Constants.RELEASE_TYPE_RELEASE
    uploadFile.displayName = "${mod_id}-fabric-${minecraft_version}-${version}"
    uploadFile.addModLoader('Fabric')
    uploadFile.addEnvironment('Client', 'Server')
    uploadFile.addJavaVersion("Java 21")
    uploadFile.addRequirement("configuration")
    compatible_mc_versions.split(",").each { gameVersion ->
        uploadFile.addGameVersion(gameVersion)
    }
}

List compatibleVersions = compatible_mc_versions.split(",")
modrinth {
    token = MODRINTH_TOKEN
    projectId = modrinth_project_id
    versionNumber = "${version}"
    versionName = "${mod_id}-fabric-${minecraft_version}-${version}"
    versionType = "release"
    uploadFile = remapJar
    gameVersions = compatibleVersions
    debugMode = debug.toBoolean()
    changelog = file("../CHANGELOG.md").exists() ? file("../CHANGELOG.md").text : "-- No changelog provided --"
    loaders = ["fabric"]
    dependencies {
        required.project "configuration"
    }
}
tasks.modrinth.dependsOn(tasks.remapJar)